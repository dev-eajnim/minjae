# 검색어 제안, 맞춤법 검사(단어교정) #

▷ 검색어 제안, 맞춤법 검사(자동완성, 검색어 제안, 예측)
  → 문법적으로 올바른  경우 or 사람들의 입력이 맞는 경우: Trie, Bloom filter
  → 문법적으로 올바르지 않은 경우 or 알 수 없는 내용 입력: 내용에 대해 맞춤법 검사, 새로운 문장 제안

	▶ Trie(트라이)
		→ 문자열을 저장하고 효율적으로 탐색하기 위한 '트리 형태'의 자료구조

	▶ Bloom filter(블룸 필터)
		→ 원소가 '집합에 속하는지' 여부를 검사하는데 사용되는 확률적 자료구조
		→ 갤럭시20이 통에 있을 줄 알았는데 없었다. (긍정오류 발생O)
		→ 갤럭시20이 통에 없을 줄 알았고, 역시 없었다. (부정오류 발생X)

	▶ 사전기반

▷ 편집거리: 두 문자열이 얼마나 유사한지 판단

	▶ Levenshtein distance(리벤슈테인)
		→ string 의 형태적인 거리, 형태적 유사도를 정의하는 방법
		→ 한 string s1 에서 다른 s2 로 교정하는데 드는 최소 횟수를 두 strings 간의 거리로 정의합니다.
		  (Word2Vec은 단어 간 의미적 유사성(거리)를 벡터로 표현, 형태적 유사성은 없음)
		→ 가장 적은 비용이 드는 수정 방법을 찾는 것이 Levenshtein distance 의 목표
		→ 3가지 edit방법
			1. delete: ‘점심을먹자 --> 점심먹자’ 로 바꾸기 위해서는 을 을 '삭제'해야 합니다.
			2. insert: ‘점심먹자 --> 점심을먹자’ 로 바꾸기 위해서는 반대로 을 을 '삽입'해야 합니다.
			3. substitution: ‘점심먹자 --> 점심먹장’ 로 바꾸기 위해서는 자를 장 으로 '치환'해야 합니다.
 
	▶ Damerau-Levenshtein distance
		→
