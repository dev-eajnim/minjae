#나의 첫 안드로이드: 안드로이드 기초부터 실습까지__1

0. 서론
1) 공부
- 스프링 
- 서버 개발을 위한 기술 서적 선정하고 학습
- 작은 앱을 기획해서 진행
- 처음에 공부할 때는 얇은 책을 정독, 끝까지 읽기
- 모든 코드를 내 손으로 직접 코딩해서 쳐보기
- 그 후에는 두꺼운 레퍼런스 책, 내가 필요한 부분만 봐서 진행합니다.
- 시중에 있는 거랑 차별점을 가지는 앱을만들자

1.본론
1)용어
Activity: 사용자가 눈으로 볼 수 있는 화면을 구성하는 요소입니다.
Fragment: 액티비티 내에서 독자적으로 동작할 수 있는 화면 구성 요소, 조각입니다.
Broadcast Receiver: 방송, 알림을 수신합니다. 예를 들어 배터리 상태, 현지 시간을 알아낼 수 있습니다.
Service: 백그라운드에서 실행되는 구성 요소, 사용자 몰래 돌아가는 것입니다.
Content Provider: 앱간의 데이터를 공유해주는 것입니다. 
Notification: 창을 내리면 앱 알림이나 현재 온 메세지들을 보여주고 그것을 누르면 실행하는 기능입니다.
Intent: 정보, 메시지 객체
Intent Filter: 다양한 인텐트를 필터링하여 원하는 기능만 수행하게 합니다.

2) 개발
- API 부분도 신경써야 합니다. 많은 사람들이 사용하면서도 기능이 있는 걸로.
- 개발환경으로 이클립스(자바)를 사용합니다. 

3) 설명

- res: 레지스토리
- layout: 화면 구성하는 파일
- xml: 쌍을 맞춰주면 됩니다. 태그를 열면 태그(/>)를 닫아주면 됩니다.
- 내부적으로 잘 되지 않으면 위에 메뉴중에서 build >> Rebuild 눌러주고 난 후에 소스코드의 문제를 찾는 게 낫습니다.
- 앱에 컴파일하는 게 gradle입니다. 거의 수정할 필요가 없습니다.
  - 만약build.gradle(Module:app) 부분에 들어가서 버전을 바꿔준 다음에 위에 sync now를 눌러줘야 다음 단계로 넘어갑니다.
- 파일 경로대로 파일을 보고 싶다면, 왼쪽 창에서 Android가 아니라 Projects로 바꿔주면 됩니다.
- manifests 파일! 매우 중요합니다. 여기서 작성한 대로 움직입니다. 다른 액티비티를 만들면 여기에 선언을 해줘야 합니다.
- 위에 메뉴창에서 핸드폰에 안드로이드 있는 아이콘을 누르면 'AVD manager'창을 띄워줍니다. 
  - 거기서 새로 추가하고 싶으면 아래 +create virtual device를 눌러주면 됩니다.


#나의 첫 안드로이드: 안드로이드 기초부터 실습까지__2
1. java >> MainActivity 파일 
- res >>activity_main.sml 파일을 화면에 보여줍니다.
- 버튼을 놓고 텍스트는 res에서 작업하지만, 나머지 로직은 java에서 작업합니다.
- 이 두개의 파일을 연결하는 방식은 onCreate에서 만들어줘야 합니다. 
- R.layout.activity_main: 리소스에서 레이아웃 폴더에 있는 activity_main이라는 xml파일을 찾으세요.
- 파일이름 없으면 파일 ctrl c, v 해서 만들어주면 됩니다.

2. res >> layout >> activitiy_main.xml
1)
- constraintlayout: layout의 종류는 많습니다. 어떻게 배치할지 설정하는 레이아웃입니다. 이에 따라 화면 구성이 달라집니다.
- 텍스트나 버튼을'드래그해서' 만들려면 ConstraintLayout이 명령어를 사용해줘야 합니다!!
- 이 때 그 상자의 상,하,좌,우 화살표를 양쪽과 윗벽과 주변에 잘 연결시켜줘야 합니다.
- 만약 LinearLayout으로 사용한다면 다 붙어서 화면에 출력됩니다.
  <LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
      android:orientation="horizontal" 
      <!--여기까지 추가로 적어줘야 함, horizontal:가로로, vertical:세로로-->
2)
- androidx.constraintlayout.widget.ConstraintLayout 
- ConstraintLayout 앞에 이렇게 많이 붙어있는 것으로 보아 기본 제공이 아니라는 사실을 알 수 있습니다.
- 그럼 명시를 해줘야 하는데, 그건 build.gradle(Module:app)에 가보면 이 라이브러리를 사용하겠다고 명시가 되어있습니다.
- 만약 명시되어있던 implementation 'androidx.constraintlayout:constraintlayout:1.1.3' 을 지운다면? (sync now 클릭함)
- Error: layout/activity_main.xml 
- 즉, app:layout_constraintBottom_toBottomOf는 Constraint를 선언해야만 사용할 수 있는데 여기서 에러가 났다는건 제대로 못쓰고 있구나, 
  그럼 build.gradle에 선언을 안해줬구나라고 생각을 해야합니다.
- 즉즉, 특정 외부것을 사용하려면 "gradle"에서 선언해줘야합니다!!

3. 버튼에 이벤트 설정하기
1) id 설명
- 위젯은 많은데, 위젯을 구분할 수 있는 방법은 "id"뿐입니다. 그래서 id를똑같이 하면 절대 안됩니다.
(위젯:홈 화면에서 바로 쓸 수 있도록 앱에서 가장 중요한 자료와 기능을 한 곳에 모아주는 역할을 한다)
(위젯을 뷰라고도 합니다. 위젯에 있는건 다 뷰라고 합니다)
2) 버튼을 실행했을 때 로그 남기기
- MainActivity.java >> setContentView(R.layout.activity_main); "ctrl 클릭"하면 바로 그곳으로 이동합니다.
- activity_main.xml 파일에서 버튼이라는 위젯을 찾아올 겁니다.
- (Mainactivity.java에서 코딩) Button button = findViewById(R.id.button2); 찾는 거니까 find치면 뒤에 이어서 나옵니다.
- 자바니까 Button이라는 객체, 이름button, id == button2
- 맞게 작성되었는지 확인하기 위해 alt Enter 치면
- import android.widget.Button;이 저절로 위에 추가됩니다.

- button이 회색인 이유는 사용하지 않았기 때문입니다.
(1)
button.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {//익명클래스, 인터페이스
            //Onclick이라는 선언은했지만 내용은 없습니다!!
            //실제쓰는 곳에서 구현을 해라!
            //근데 우린 여기서 구현을 할게요. (2)로 이동
            }
        });
        
 (익명클래스: 이름이 없고, 클래스의 선언과 객체의 생성을 동시에 하기 때문에 단 한번만 사용될 수 있고 오직 하나의 객체만을 생성할수 있는 일회용 클래스 이다ㄷ )
 (이름이 없기때문에 생성자도 없고 클래스로 상속받는 동시에 인터페이스를 구현하거나 둘 이상의 인터페이스를 구현할 수 없다.
 
 (인터페이스: 개발자 사이의 코드 규약을 정한, 여러 구현체에서 공통적인 부분을 추상화한다. 다형성)
 (안에 아무것도 없습니다)

(2) 버튼을 누르면 logcat에서 확인가능
        button.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                //Log.d("TAG","ONCLICK!"); //사용자에게 입력을 받았다는 의미입니다.
                Log.d("MainActivity","ONCLICK!"); // TAG대신에 클래스 이름을 사용할 수도 있습니다.
            }
        });
        
(3) 익명 클래스 또 다르게 쓰는 방법: 버튼 클릭하면 Run에서 확인가능
public class MainActivity extends AppCompatActivity {

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
        Button button = findViewById(R.id.button2);
        button.setOnClickListener(listener);
    }
    View.OnClickListener listener = new View.OnClickListener(){
        @Override
        public void onClick(View v){
            Log.d("MainActivity","ONCLICK!");
        }
    };
}

(2), (3) 둘은 같은 과정으로 이뤄지는 코드입니다.
(2)에서 ()안에 매개변수로 사용했던 것을 밖으로 뺐습니다.

(4) 이것도 같은 코드입니다.
public class MainActivity extends AppCompatActivity implements View.OnClickListener {

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
        Button button = findViewById(R.id.button2);
        button.setOnClickListener(this);
        //this는 자신을 가리키고, super는 상위 부모를 가리킵니다.
        //this만 하면 오류가 나니까 alt enter 눌러봅니다.
        //2가지가 달라졌습니다! implement가 생겼고, 아래 onClick이 나왔습니다.
    }
    @Override
    public void onClick(View view) {
        Log.d("MainActivity","ONCLICK!");
    }
}
5) 만약 버튼이 2,3개라면 어떻합니까?
- xml에서 버튼 추가하고 화살표로 간격설정 잘해주기
##activity_main.xml##
       <TextView
        android:id="@+id/textView"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="TextView"
        app:layout_constraintBottom_toBottomOf="parent"
        app:layout_constraintEnd_toEndOf="parent"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintTop_toTopOf="parent"
        app:layout_constraintVertical_bias="0.785" />

    <Button
        android:id="@+id/button1"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="Button1"
        app:layout_constraintBottom_toTopOf="@+id/button2"
        app:layout_constraintEnd_toEndOf="parent"
        app:layout_constraintHorizontal_bias="0.498"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintTop_toTopOf="parent"
        app:layout_constraintVertical_bias="0.632" />

    <Button
        android:id="@+id/button2"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:layout_marginBottom="168dp"
        android:text="Button2"
        app:layout_constraintBottom_toTopOf="@+id/textView"
        app:layout_constraintEnd_toEndOf="parent"
        app:layout_constraintHorizontal_bias="0.498"
        app:layout_constraintStart_toStartOf="parent"
        tools:ignore="MissingConstraints" />
</androidx.constraintlayout.widget.ConstraintLayout>

##MainActivity.java##
public class MainActivity extends AppCompatActivity implements View.OnClickListener {
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        Button button1 = findViewById(R.id.button1);
        button1.setOnClickListener(this);

        Button button2 = findViewById(R.id.button2);
        button2.setOnClickListener(this);
    }
    @Override
    public void onClick(View v) {
        if(v.getId()==R.id.button1){  @@
            Log.d("MainActivity","ONCLICK! Button1");
        }else if(v.getId() ==R.id.button2){  @@
            Log.d("MainActivity","ONCLICK! Button2");
        }
    }
}
@@ 이 부분들에서 계속 v.getid()를 찾고 있습니다.

6) 같은 게 반복되면 안좋은 냄새가 나는 것입니다. 그래서 코드를 조금 수정하도로 하겠습니다. 
public void onClick(View v) {
        int id = v.getId(); // v.getId() 이것은 인트형 자료입니다.

        if(id==R.id.button1){ @@
            Log.d("MainActivity","ONCLICK! Button1");
        }else if(id ==R.id.button2){   @@
            Log.d("MainActivity","ONCLICK! Button2");
        }
    }
    
 7) this를 사용하지 말아보자. >> new View.OnClickListener(){}
 아래를 추가하면 코드가 길어집니다. 
 익명 클래스를 사용할 때는 그 안에 코드가 짧을 때 사용하면 좋습니다. 
public class MainActivity extends AppCompatActivity {
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        Button button1 = findViewById(R.id.button1);
        button1.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                Log.d("MainActivity","ONCLICK! Button1");
            }
        });

        Button button2 = findViewById(R.id.button2);
        button2.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                Log.d("MainActivity","ONCLICK! Button2");
            }
        });
    }
}

8) 별도 메소드로 뺄 수도 있습니다.
public class MainActivity extends AppCompatActivity {
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        Button button1 = findViewById(R.id.button1);
        button1.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                logButton();    @@
            }
        });

        Button button2 = findViewById(R.id.button2);
        button2.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                Log.d("MainActivity","ONCLICK! Button2");
            }
        });
    }
    private void logButton(){   @@
        Log.d("MainActivity","ONCLICK! Button1");
    }
}

4. 단축키
1) ctrl Alt l(엘) : 코드 예쁘게 정렬해줍니다.
2) 자동임포트 설정import
file > other settings > defalut setting > auto import > 
java에 있는 Add unambiguous imports on the fly를 체크해줍니다. 


5. 
- R.id.button1에서 xml에 있는 걸 사용하는것에 궁금증을 느껴야 합니다. 
- build가 자바 파일을 만들어서 R. 이런 것들을 만들어줍니다.
- 그 경로를 찾아가 봅시다. 경로로 보려면 왼쪽 창에 안드로이드 역삼각형을 눌러서 프로젝트로 바꿔주면 됩니다.
- 프로젝트/app/build/generated/source/r/debug/kr/co/hanbit(현재프로젝트)/firstapp/
- 가다보면 R.이라는 클래스가 있데, 근데 난 없어. 여기는 do not modify, 수정이 안됩니다.
- 그 파일을 보면 final 이라고 되어있는 것들이 있는데 final은 수정이 안됩니다.
- 여튼 id, 이미지 파일 모두 int형!! 이것만 기억하면 됩니다.

6. 이미지를 선언하여 사용하는 방법
1) app > main > res > drawable 에 원하는 사진을 넣습니다.
2) MainActivity.java에서 코드를 작성해줍니다.
public class MainActivity extends AppCompatActivity { //이 안에 작성해줍니다.

    int[] drawables = {R.drawable.cu_01, R.drawable.cu_02};
    // 이미지를 보여주기려면 int라는 배열로 선언해줘야 합니다!!
    // 선언만 해서 저장하고 보여주지는 못한 거 같다.
