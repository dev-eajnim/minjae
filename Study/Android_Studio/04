Android Studio 구조 및 동작 원리

1. app
* 모듈: 프로그램을 구성하는 구성 요소의 일부로써 어플이나 라이브러리를 구성하는 최소단위입니다. 
1) manifests(명확한)
- 어플의 기본 정보를 담고 있는 xml파일입니다.
- 어플의 이름, 메인 아이콘 이미지, 어플 버전
- 어플 기능을 수행하기 위한 permission들
- 어플 내에서 보여지는 activity들이 이 AndroidManifest.xml파일에서 먼저 선언된다.

*grid: 전력 그리드, 발전소, 변압기, 송전선 등으로 이루어진 전력망을 뜻한다. 
       사용자가 전국 어디서나 콘센트에 플러그를 꽂기만 하면 어느 발전소에서 생산되어 공급되는 전기를 사용할 수 있다는 점이다. 
       네트워크에 연결된 컴퓨터에 있는 처리 용량, 저장 용량, 자료 등의 자원들을 통합적으로 이용할 수 있도록 하는 것이다. 
       즉, 사용자에게는 마치 전체 네트워크의 컴퓨터들의 능력이 합쳐진 하나의 거대한 가상의 컴퓨터가 있는 것처럼 보인다. 
       사용자가 자신의 PC만을 쓰는 것이 아니라 네트워크에 연결된 다른 컴퓨터들의 능력도 쉽게 빌려 쓸 수 있도록 해 주는 것이다.
*portrait(초상화)

2) java
        - 안드로이드는 크게 java와 xml의 두 가지 구조로 나누어진다.
        - xml은 사용자에게 보여지는 화면구성을 나타낸다. 
        - xml에서 UI를 만들고 정적인 화면구성을 표현한다면
 - java에서는 실질적인 동작과 구현을 만든다. 일부 동적인 화면들 또한 java에서 구현하게 된다.

3) res
 - 리소스 폴더는 drawable/layout/menu/mipmap/values로 나뉘어진다.
 - drawable: 프로젝트 상에서 필요한 모든 이미지들을 저장하는 곳이다. (화살표, 아이콘, 도형 등등)
*drawable(그릴 수 있는)
 - layout: 정적인 UI화면을 구성하는 xml파일들이다.
 - mipmap: 어플의 메인 아이콘들을 저장하는 곳이다. 안드로이드는 기기별로 해상도가 다르기 때문에 해상도별로 다른 아이콘이 필요하다.
 (어플 누르는 그 아이콘)
 - values: colors/dimens/strings/styles로 나뉘다.
       - colors: 어플내에서 사용하는 색상을 지정한다.
       - dimens: 크기를 지정하는 xml이다. 여백, 글자크기 등을 지정해서 한 번에 변경할 때 사용
       - strings: 어플내에서 사용하는 text들을 미리 지정할 때 사용한다. 어플의 이름도 strings 내에서 지정한다.
                  strings를 사용하지 않고 직접 xml, java 내에서 텍스트를 입력해도 가능하다.
                  다만, 영어 등 다른 여러 언어를 지원하기 위해서는 strings를 필수적으로 사용해야 한다. 
                  스마트폰 사용환경에 따라 자동적으로 해당 언어를 선택해서 사용하게 된다.
              - dp(Density Independent Pixel): px(pixel)만으로는 해상도에 따라 크기가 달라지기 때문에 
                                               안드로이드 폰의 다양한 해상도를 지원하기 위해 만든 단위
                                               큰 화면이든 작은 화면이든 실제 눈으로 보기에 같은 크기로 보이도록 합니다.
                                               해상도가 낮은 폰에서 1cm와 해상도가 높은 폰에서 1cm짜리가 같도록
        - styles: 어플의 스타일을 지정한다. 팝업이나 화면의 기본적인 디자인을 결정한다. 
(resource 폴더 내에 파일을 생성할 때는 반드시 소문자 알파벳과 숫자 그리고 _ 만 사용해야 한다. 그리고 파일명의 첫 번째는 소문자 알파벳이 앞에 와야 한다)



2. gradle
- gradle은 의존성 기반의 프로그래밍 언어이다.
- 태스크를 정의하고, 태스크들 사이의 의존성도 정의할 수 있다.
- 태스트들이 의존성의 순서에 따라 실행되고, 오직 한 번만 실행될 것임을 보장한다.



3. 과정 및 원리
- xml에서 선언,java에서 내용구성
1) 프로젝트 구성
- Android Studio + Android SDK
- libs, src, res, values, build.gradle, settings.gradle

2) 소스 컴파일
- javac compiler
- .class
- libraries
- de tool
- Resource processing

3) 패키징
- gradle,



4. 기타
1) 새로운 액티비티 --> 실행
: onCreate() > onStart() > onResume()
위의 순서대로 메소드가 실행

2) 실행 --> 일시정지
onPause()

3) 일시정지 --> 실행
onResume()

4) 일시정지 --> 중지
onStop()

5) 중지 --> 실행
onRestart()
onStart()
onResume()

6) 중지 --> 소멸
onDestroy()

